name: Parallel GenX Jobs on Azure Container Apps

on:
  workflow_dispatch:
    inputs:
      blob_container:
        description: 'Azure Blob Storage container name (e.g., genx-data)'
        required: true
        type: string
      case_names:
        description: 'Comma-separated list of case names to run (e.g., kentucky,texas,california)'
        required: true
        type: string
      cpu_cores:
        description: 'CPU cores per job (0.25-2.0)'
        required: false
        default: '1.0'
        type: string
      memory_gb:
        description: 'Memory in GB per job (0.5-4.0)'
        required: false
        default: '2.0'
        type: string
      max_parallel:
        description: 'Maximum parallel jobs'
        required: false
        default: '5'
        type: string

env:
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_LOCATION: eastus
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
  CONTAINER_REGISTRY: genxregistry${{ github.run_number }}
  CONTAINER_APP_ENV: genx-env  # Use existing environment

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      case-matrix: ${{ steps.parse-cases.outputs.cases }}
      registry-name: ${{ steps.setup-vars.outputs.registry }}
      image-name: ${{ steps.setup-vars.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse case names into matrix
        id: parse-cases
        run: |
          cases="${{ github.event.inputs.case_names }}"
          # Convert comma-separated string to JSON array (compact format)
          json_array=$(echo "$cases" | jq -R -c 'split(",") | map(select(length > 0) | gsub("^\\s+|\\s+$"; ""))')
          echo "cases=$json_array" >> $GITHUB_OUTPUT
          echo "Parsed cases: $json_array"

      - name: Setup variables
        id: setup-vars
        run: |
          echo "registry=${{ env.CONTAINER_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "image=${{ env.CONTAINER_REGISTRY }}.azurecr.io/genx:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure Container Registry
        run: |
          az acr create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_REGISTRY }} \
            --sku Basic \
            --admin-enabled true \
            --location ${{ env.AZURE_LOCATION }}

      - name: Build and push Docker image
        run: |
          # Login to ACR
          az acr login --name ${{ env.CONTAINER_REGISTRY }}
          
          # Build and push image
          docker build -t ${{ steps.setup-vars.outputs.image }} .
          docker push ${{ steps.setup-vars.outputs.image }}

      - name: Create Container App Environment
        run: |
          # Check if environment already exists
          if az containerapp env show --name ${{ env.CONTAINER_APP_ENV }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
            echo "Container App Environment ${{ env.CONTAINER_APP_ENV }} already exists, skipping creation"
          else
            echo "Creating Container App Environment ${{ env.CONTAINER_APP_ENV }}"
            # Try to create environment, handle quota errors gracefully
            if ! az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENV }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_LOCATION }}; then
              
              echo "Failed to create new environment. Checking for existing environments..."
              existing_env=$(az containerapp env list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv 2>/dev/null || echo "")
              
              if [ -n "$existing_env" ]; then
                echo "Using existing environment: $existing_env"
                echo "CONTAINER_APP_ENV=$existing_env" >> $GITHUB_ENV
              else
                echo "No existing environments found. This may be a subscription quota limit."
                echo "Please check your Azure subscription Container App Environment limits."
                exit 1
              fi
            fi
          fi

  run-parallel-jobs:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      max-parallel: ${{ fromJson(github.event.inputs.max_parallel) }}
      matrix:
        case: ${{ fromJson(needs.setup.outputs.case-matrix) }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create and run Container App Job
        id: run-job
        run: |
          JOB_NAME="genx-${{ matrix.case }}-${{ github.run_number }}"
          
          # Get ACR credentials
          ACR_SERVER="${{ needs.setup.outputs.registry-name }}.azurecr.io"
          ACR_USERNAME=$(az acr credential show --name ${{ needs.setup.outputs.registry-name }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ needs.setup.outputs.registry-name }} --query passwords[0].value -o tsv)
          
          # Create Container App Job
          az containerapp job create \
            --name "$JOB_NAME" \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APP_ENV }} \
            --image "${{ needs.setup.outputs.image-name }}" \
            --registry-server "$ACR_SERVER" \
            --registry-username "$ACR_USERNAME" \
            --registry-password "$ACR_PASSWORD" \
            --cpu ${{ github.event.inputs.cpu_cores }} \
            --memory ${{ github.event.inputs.memory_gb }}Gi \
            --env-vars \
              AZURE_STORAGE_ACCOUNT=${{ env.AZURE_STORAGE_ACCOUNT }} \
              AZURE_STORAGE_KEY=${{ env.AZURE_STORAGE_KEY }} \
              BLOB_CONTAINER=${{ github.event.inputs.blob_container }} \
              CASE_NAME=${{ matrix.case }} \
            --parallelism 1 \
            --replica-completion-count 1 \
            --replica-retry-limit 2 \
            --replica-timeout 7200

          # Start the job
          EXECUTION_NAME=$(az containerapp job start --name "$JOB_NAME" --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query name -o tsv)
          echo "execution-name=$EXECUTION_NAME" >> $GITHUB_OUTPUT
          echo "job-name=$JOB_NAME" >> $GITHUB_OUTPUT

      - name: Monitor job execution
        run: |
          JOB_NAME="${{ steps.run-job.outputs.job-name }}"
          EXECUTION_NAME="${{ steps.run-job.outputs.execution-name }}"
          
          echo "Monitoring job: $JOB_NAME, execution: $EXECUTION_NAME"
          
          # Wait for job completion (timeout after 2 hours)
          timeout=7200
          interval=30
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            status=$(az containerapp job execution show \
              --name "$JOB_NAME" \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --execution-name "$EXECUTION_NAME" \
              --query "properties.status" -o tsv 2>/dev/null || echo "Unknown")
            
            echo "[$elapsed s] Job status: $status"
            
            if [ "$status" = "Succeeded" ]; then
              echo "✅ Job completed successfully!"
              exit 0
            elif [ "$status" = "Failed" ]; then
              echo "❌ Job failed!"
              exit 1
            fi
            
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          echo "⏰ Job timed out after $timeout seconds"
          exit 1

      - name: Get job logs
        if: always()
        run: |
          JOB_NAME="${{ steps.run-job.outputs.job-name }}"
          EXECUTION_NAME="${{ steps.run-job.outputs.execution-name }}"
          
          echo "Fetching logs for job: $JOB_NAME, execution: $EXECUTION_NAME"
          
          # Get logs and save to file
          az containerapp job execution show \
            --name "$JOB_NAME" \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --execution-name "$EXECUTION_NAME" \
            --query "properties.template.containers[0].image" -o tsv || true
          
          # Try to get logs
          az containerapp logs show \
            --name "$JOB_NAME" \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --follow false \
            --tail 1000 > "${{ matrix.case }}-logs.txt" || echo "Could not retrieve logs"

      - name: Upload job logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: genx-logs-${{ matrix.case }}
          path: ${{ matrix.case }}-logs.txt
          retention-days: 7

  cleanup:
    needs: [setup, run-parallel-jobs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Cleanup Azure resources
        run: |
          # Delete Container App Environment (this will also delete jobs)
          az containerapp env delete \
            --name ${{ env.CONTAINER_APP_ENV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --yes || true

          # Delete Container Registry
          az acr delete \
            --name ${{ env.CONTAINER_REGISTRY }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --yes || true

  summary:
    needs: [setup, run-parallel-jobs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Job Summary
        run: |
          echo "## GenX Parallel Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cases processed:** ${{ github.event.inputs.case_names }}" >> $GITHUB_STEP_SUMMARY
          echo "**Container:** ${{ github.event.inputs.blob_container }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resources per job:** ${{ github.event.inputs.cpu_cores }} CPU, ${{ github.event.inputs.memory_gb }}GB RAM" >> $GITHUB_STEP_SUMMARY
          echo "**Max parallel:** ${{ github.event.inputs.max_parallel }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Results location:** Azure Blob Storage container \`${{ github.event.inputs.blob_container }}\` under \`results/\` folder" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs artifacts for detailed execution information."
