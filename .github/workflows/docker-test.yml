name: GenX Docker Build, Test and Deploy with Event Grid

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_NAME: genxjlregistry
  IMAGE_NAME: genx-jl
  RESOURCE_GROUP: genx-rg
  STORAGE_ACCOUNT: genxstorage
  LOCATION: eastus
  FUNCTION_APP_NAME: genx-function-app

jobs:
  docker-test:
    name: Build, Test and Deploy GenX Container
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate image tags
      id: meta
      run: |
        # Generate tags for the image
        echo "tags=genx-test:latest,genx-test:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "sha-short=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker container with three-zones case
      run: |
        echo "üß™ Testing Docker container with GenX three-zone example..."
        echo "üìä Container: genx-test:latest"
        echo ""
        
        # Run the container with real-time log following
        # Use timeout and resource limits for safety
        set +e  # Don't exit on error immediately
        timeout 360 docker run --memory=4g --memory-swap=4g --name genx-test genx-test:latest
        DOCKER_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo ""
        echo "üìã Container Exit Code: $DOCKER_EXIT_CODE"
        
        # Check if the container ran successfully
        if [ $DOCKER_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Container executed successfully"
        elif [ $DOCKER_EXIT_CODE -eq 124 ]; then
          echo "‚ùå Container execution timed out (5 minutes)"
          # Get logs from the container even if it timed out
          echo "üìã Container logs from timeout:"
          docker logs genx-test || true
          exit 1
        else
          echo "‚ùå Container execution failed with exit code $DOCKER_EXIT_CODE"
          # Get logs from the failed container
          echo "üìã Container logs from failure:"
          docker logs genx-test || true
          exit 1
        fi
        
        # Extract container logs for analysis
        echo ""
        echo "üîç Analyzing results..."
        CONTAINER_LOGS=$(docker logs genx-test 2>&1)
        
        # Check for successful completion
        if echo "$CONTAINER_LOGS" | grep -q "Wrote outputs to"; then
          echo "‚úÖ GenX optimization completed successfully"
        else
          echo "‚ùå GenX optimization did not complete"
          exit 1
        fi
        
        # Extract objective value
        OBJECTIVE=$(echo "$CONTAINER_LOGS" | grep -o "objective value.*[0-9]\+\.[0-9]\+e+[0-9]\+" | tail -1 | grep -o "[0-9]\+\.[0-9]\+e+[0-9]\+" || true)
        if [ ! -z "$OBJECTIVE" ]; then
          echo "üí∞ Objective value: $OBJECTIVE"
        fi
        
        # Extract solve time
        SOLVE_TIME=$(echo "$CONTAINER_LOGS" | grep -o "HiGHS run time.*[0-9]\+\.[0-9]\+" | tail -1 | grep -o "[0-9]\+\.[0-9]\+" || true)
        if [ ! -z "$SOLVE_TIME" ]; then
          echo "‚è±Ô∏è  Solve time: ${SOLVE_TIME}s"
        fi
        
        # Check for resource loading
        RESOURCES=$(echo "$CONTAINER_LOGS" | grep -o "Total number of resources: [0-9]\+" | tail -1 | grep -o "[0-9]\+" || true)
        if [ ! -z "$RESOURCES" ]; then
          echo "üîå Resources loaded: $RESOURCES"
        fi
        
        # Check environment variable is working
        if echo "$CONTAINER_LOGS" | grep -q "GENX_PRECOMPILE=false"; then
          echo "üîß GENX_PRECOMPILE environment variable detected"
        fi
        
        echo ""
        echo "üéâ Container test passed! Ready for production deployment."

    - name: Azure Login
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "üîê Logging into Azure Container Registry..."
        # Ensure ACR exists (create if it doesn't)
        az acr create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.REGISTRY_NAME }} \
          --sku Basic \
          --admin-enabled true || true
        
        # Login to ACR
        az acr login --name ${{ env.REGISTRY_NAME }}

    - name: Create Azure Storage and Event Grid Infrastructure
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "üèóÔ∏è Creating Azure Storage and Event Grid infrastructure..."
        
        # Create storage account if it doesn't exist
        az storage account create \
          --name ${{ env.STORAGE_ACCOUNT }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --location ${{ env.LOCATION }} \
          --sku Standard_LRS \
          --kind StorageV2 || true
        
        # Create blob containers for case inputs and results
        for container in cases results logs; do
          az storage container create \
            --name $container \
            --account-name ${{ env.STORAGE_ACCOUNT }} \
            --auth-mode login || true
        done
        
        echo "‚úÖ Storage infrastructure ready"

    - name: Create Function App for Event Grid Processing
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "‚ö° Creating Function App for automated case processing..."
        
        # Create Function App
        az functionapp create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --consumption-plan-location ${{ env.LOCATION }} \
          --runtime python \
          --runtime-version 3.12 \
          --functions-version 4 \
          --name ${{ env.FUNCTION_APP_NAME }} \
          --storage-account ${{ env.STORAGE_ACCOUNT }} || true
        
        # Get credentials for Function App configuration
        ACR_USERNAME=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query passwords[0].value --output tsv)
        SUBSCRIPTION_ID=$(az account show --query id --output tsv)
        
        # Configure Function App settings
        az functionapp config appsettings set \
          --name ${{ env.FUNCTION_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --settings \
            AZURE_SUBSCRIPTION_ID=$SUBSCRIPTION_ID \
            AZURE_RESOURCE_GROUP=${{ env.RESOURCE_GROUP }} \
            AZURE_LOCATION=${{ env.LOCATION }} \
            ACR_REGISTRY_NAME=${{ env.REGISTRY_NAME }} \
            ACR_USERNAME=$ACR_USERNAME \
            ACR_PASSWORD=$ACR_PASSWORD \
            STORAGE_ACCOUNT_NAME=${{ env.STORAGE_ACCOUNT }} \
            GENX_IMAGE_TAG=${{ github.sha }}
        
        echo "‚úÖ Function App configured"

    - name: Tag and push tested image to Azure Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "üè∑Ô∏è Tagging and pushing tested Docker image to ACR..."
        
        # Get ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query loginServer --output tsv)
        
        # Tag the tested image with ACR tags
        docker tag genx-test:latest $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest
        docker tag genx-test:latest $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag genx-test:latest $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha-short }}
        
        # Push all tags
        docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest
        docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha-short }}
        
        echo "‚úÖ Tested image pushed to ACR with tags:"
        echo "   ‚Ä¢ $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest"
        echo "   ‚Ä¢ $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "   ‚Ä¢ $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha-short }}"

    - name: Show deployment info
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Get ACR login server for display
        ACR_LOGIN_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query loginServer --output tsv)
        
        echo "üöÄ Docker image successfully pushed to Azure Container Registry!"
        echo "üìã Image tags:"
        echo "   ‚Ä¢ $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest"
        echo "   ‚Ä¢ $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "   ‚Ä¢ $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha-short }}"
        echo ""
        echo "üîó ACR Repository: $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}"

    - name: Create Event Grid Subscription
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "üì° Creating Event Grid subscription for blob events..."
        
        SUBSCRIPTION_ID=$(az account show --query id --output tsv)
        
        # Create Event Grid topic
        az eventgrid topic create \
          --name genx-blob-events \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --location ${{ env.LOCATION }} || true
        
        # Create Event Grid subscription to trigger function on blob uploads
        FUNCTION_ENDPOINT="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.FUNCTION_APP_NAME }}/functions/process_genx_case"
        
        az eventgrid event-subscription create \
          --name genx-case-processing \
          --source-resource-id "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Storage/storageAccounts/${{ env.STORAGE_ACCOUNT }}" \
          --endpoint-type azurefunction \
          --endpoint $FUNCTION_ENDPOINT \
          --included-event-types Microsoft.Storage.BlobCreated \
          --subject-begins-with /blobServices/default/containers/cases/ || true
        
        echo "‚úÖ Event Grid subscription created"

    - name: Deploy Function App Code
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Deploying Function App code..."
        
        # Install Azure Functions Core Tools
        npm install -g azure-functions-core-tools@4 --unsafe-perm true
        
        # Deploy the function code
        cd azure-function
        func azure functionapp publish ${{ env.FUNCTION_APP_NAME }} --python
        
        echo "‚úÖ Function App deployed"

    - name: Show complete deployment summary
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo ""
        echo "üéâ GenX Event Grid Infrastructure Deployed!"
        echo "=========================================="
        echo ""
        echo "üì¶ Components:"
        echo "   ‚Ä¢ Storage Account: ${{ env.STORAGE_ACCOUNT }}"
        echo "   ‚Ä¢ Containers: cases, results, logs"
        echo "   ‚Ä¢ Function App: ${{ env.FUNCTION_APP_NAME }}"
        echo "   ‚Ä¢ Event Grid: genx-blob-events"
        echo "   ‚Ä¢ Container Registry: ${{ env.REGISTRY_NAME }}"
        echo ""
        echo "üîÑ Usage:"
        echo "   1. Upload GenX case to 'cases' container"
        echo "   2. Event Grid triggers function automatically"
        echo "   3. Function creates container with SHA: ${{ github.sha }}"
        echo "   4. Container processes case and uploads results"
        echo ""
        echo "üìö Documentation: See EVENT_GRID_AUTOMATION.md"
        
    - name: Show container logs on failure
      if: failure()
      run: |
        echo "üìã Container logs:"
        echo "=================="
        docker logs genx-test || echo "No container logs available"
        
    - name: Cleanup
      if: always()
      run: |
        # Remove test container
        docker rm genx-test || true
        # Keep the local test image for caching, only remove if we want to save space
        # docker rmi genx-test:latest || true
